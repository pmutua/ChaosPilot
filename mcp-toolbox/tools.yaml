sources:
  logger-db:
    kind: "sqlite"
    database: "./logger-data/database.db"

tools:
  get_agent_status_metrics:
    kind: sqlite-sql
    source: logger-db
    description: Returns all chaos agents and their latest metrics.
    parameters: []
    statement: |
      SELECT
        chaos_agent AS agent_id,
        COUNT(DISTINCT experiment_id) AS experiment_count,
        ROUND(100.0 * SUM(CASE WHEN severity != 'CRITICAL' THEN 1 ELSE 0 END) / COUNT(*), 2) || '%' AS success_rate,
        MAX(timestamp) AS last_updated
      FROM chaos_logs
      GROUP BY chaos_agent
      ORDER BY last_updated DESC;

  list_experiments:
    kind: sqlite-sql
    source: logger-db
    description: List all chaos experiments.
    statement: |
      SELECT
        experiment_id AS id,
        MAX(timestamp) AS last_seen,
        COUNT(*) AS total_logs,
        SUM(CASE WHEN severity IN ('CRITICAL', 'ERROR') THEN 1 ELSE 0 END) AS error_logs
      FROM chaos_logs
      GROUP BY experiment_id
      ORDER BY last_seen DESC;

  get_experiment_by_id:
    kind: sqlite-sql
    source: logger-db
    description: Get all logs for a specific experiment.
    parameters:
      - name: experiment_id
        type: string
        description: The experiment ID (e.g., "exp0001").
    statement: |
      SELECT *
      FROM chaos_logs
      WHERE experiment_id = ?
      ORDER BY timestamp DESC;

  list_anomalies:
    kind: sqlite-sql
    source: logger-db
    description: List critical or unusual chaos log entries (anomalies).
    statement: |
      SELECT
        id,
        experiment_id,
        message AS anomaly_type,
        severity,
        timestamp AS detected_at
      FROM chaos_logs
      WHERE severity IN ('CRITICAL', 'EMERGENCY', 'ALERT')
      ORDER BY detected_at DESC;

  search_logs_by_agent:
    kind: sqlite-sql
    source: logger-db
    description: Search logs generated by a specific agent.
    parameters:
      - name: agent_name
        type: string
        description: The name of the chaos agent.
    statement: |
      SELECT *
      FROM chaos_logs
      WHERE chaos_agent = ?
      ORDER BY timestamp DESC;

  recent_failed_experiments:
    kind: sqlite-sql
    source: logger-db
    description: List experiments with at least one CRITICAL error in the past 7 days.
    statement: |
      SELECT
        experiment_id AS id,
        MAX(timestamp) AS last_failure_time,
        COUNT(*) AS failure_count
      FROM chaos_logs
      WHERE severity = 'CRITICAL'
        AND timestamp >= datetime('now', '-7 days')
      GROUP BY experiment_id
      ORDER BY last_failure_time DESC;

toolsets:
  chaos_toolset:
    - list_experiments
    - get_experiment_by_id
    - list_anomalies
    - search_logs_by_agent
    - recent_failed_experiments
    - get_agent_status_metrics
