sources:
  bq-export:
    kind: "bigquery"
    project: ${GOOGLE_CLOUD_PROJECT}

tools:
  system_chaos_summary:
    kind: bigquery-sql
    source: bq-export
    description: Aggregated view of all chaos logs in the system.
    parameters: []
    statement: |
      SELECT
        severity,
        COUNT(*) AS count,
        COUNT(DISTINCT jsonPayload.agent_id) AS affected_agents,
        COUNT(DISTINCT jsonPayload.experiment_id) AS affected_experiments,
        STRING_AGG(DISTINCT jsonPayload.region) AS involved_regions
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      GROUP BY severity
      ORDER BY count DESC;

  frequent_failure_patterns:
    kind: bigquery-sql
    source: bq-export
    description: Top recurring failure messages in chaos logs.
    statement: |
      SELECT
        jsonPayload.message AS failure_message,
        COUNT(*) AS occurrences,
        STRING_AGG(DISTINCT jsonPayload.agent_id) AS involved_agents
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity IN ('CRITICAL', 'ERROR')
      GROUP BY jsonPayload.message
      ORDER BY occurrences DESC
      LIMIT 10;

  list_experiments:
    kind: bigquery-sql
    source: bq-export
    description: List all chaos experiments.
    statement: |
      SELECT
        jsonPayload.experiment_id AS id,
        MAX(jsonPayload.timestamp) AS last_seen,
        COUNT(*) AS total_logs,
        SUM(CASE WHEN severity IN ('CRITICAL', 'ERROR') THEN 1 ELSE 0 END) AS error_logs
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      GROUP BY jsonPayload.experiment_id
      ORDER BY last_seen DESC;

  get_experiment_by_id:
    kind: bigquery-sql
    source: bq-export
    description: Get all logs for a specific experiment.
    parameters:
      - name: experiment_id
        type: string
        description: The experiment ID (e.g., "exp0001").
    statement: |
      SELECT *
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE jsonPayload.experiment_id = ?
      ORDER BY jsonPayload.timestamp DESC;

  list_anomalies:
    kind: bigquery-sql
    source: bq-export
    description: List critical or unusual chaos log entries (anomalies).
    statement: |
      SELECT
        jsonPayload.experiment_id,
        jsonPayload.message AS anomaly_type,
        severity,
        jsonPayload.timestamp AS detected_at
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity IN ('CRITICAL', 'EMERGENCY', 'ALERT')
      ORDER BY detected_at DESC;

  recent_failed_experiments:
    kind: bigquery-sql
    source: bq-export
    description: List experiments with at least one CRITICAL error in the past 7 days.
    statement: |
      SELECT
        jsonPayload.experiment_id AS id,
        MAX(jsonPayload.timestamp) AS last_failure_time,
        COUNT(*) AS failure_count
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity = 'CRITICAL'
        AND jsonPayload.timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)
      GROUP BY jsonPayload.experiment_id
      ORDER BY last_failure_time DESC;

  recent_errors:
    kind: bigquery-sql
    source: bq-export
    description: Last 5 ERROR and CRITICAL logs.
    parameters: []
    statement: |
      SELECT
        jsonPayload.experiment_id,
        jsonPayload.message AS failure_type,
        severity,
        jsonPayload.region,
        jsonPayload.timestamp
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity IN ('ERROR', 'CRITICAL')
      ORDER BY jsonPayload.timestamp DESC
      LIMIT 5;

  most_frequent_error_types:
    kind: bigquery-sql
    source: bq-export
    description: Most frequent error messages by count.
    parameters: []
    statement: |
      SELECT
        jsonPayload.message AS failure_type,
        COUNT(*) AS count,
        STRING_AGG(DISTINCT jsonPayload.region) AS regions
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity IN ('ERROR', 'CRITICAL')
      GROUP BY jsonPayload.message
      ORDER BY count DESC
      LIMIT 5;

  errors_logs_grouped_by_severity:
    kind: bigquery-sql
    source: bq-export
    description: Errors grouped by severity.
    parameters: []
    statement: |
      SELECT severity, COUNT(*) AS count
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity IN ('ERROR', 'CRITICAL')
      GROUP BY severity;

  critical_error_logs_grouped_by_region:
    kind: bigquery-sql
    source: bq-export
    description: Count of errors by region and severity.
    parameters: []
    statement: |
      SELECT jsonPayload.region, severity, COUNT(*) AS count
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity IN ('ERROR', 'CRITICAL')
      GROUP BY jsonPayload.region, severity;

  total_error_logs:
    kind: bigquery-sql
    source: bq-export
    description: Total ERROR and CRITICAL logs.
    parameters: []
    statement: |
      SELECT COUNT(*) AS total_error_logs
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity IN ('ERROR', 'CRITICAL');

  agent_failure_rate:
    kind: bigquery-sql
    source: bq-export
    description: Failure rate per agent.
    statement: |
      SELECT
        jsonPayload.agent_id,
        COUNT(*) AS total_logs,
        SUM(CASE WHEN severity IN ('CRITICAL', 'ERROR') THEN 1 ELSE 0 END) AS error_count,
        ROUND(SAFE_DIVIDE(SUM(CASE WHEN severity IN ('CRITICAL', 'ERROR') THEN 1 ELSE 0 END), COUNT(*)), 2) AS failure_rate
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      GROUP BY jsonPayload.agent_id
      ORDER BY failure_rate DESC;

  user_impact_summary:
    kind: bigquery-sql
    source: bq-export
    description: Impact on users from error logs.
    statement: |
      SELECT
        jsonPayload.details.user_id,
        COUNT(*) AS total_events,
        COUNTIF(severity = 'CRITICAL') AS critical_events,
        COUNTIF(severity = 'ERROR') AS error_events
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity IN ('CRITICAL', 'ERROR')
      GROUP BY jsonPayload.details.user_id
      ORDER BY critical_events DESC;

  http_error_summary:
    kind: bigquery-sql
    source: bq-export
    description: Common HTTP failure patterns.
    statement: |
      SELECT
        jsonPayload.httprequest.requestmethod AS method,
        jsonPayload.httprequest.requesturl AS url,
        jsonPayload.status_code,
        COUNT(*) AS failures
      FROM `aceti-462716.bqexport.chaospilot_fake_logs_20250620`
      WHERE severity = 'ERROR'
      GROUP BY method, url, jsonPayload.status_code
      ORDER BY failures DESC
      LIMIT 10;

toolsets:
  detector_toolset:
    - recent_errors
    - most_frequent_error_types
    - errors_logs_grouped_by_severity
    - critical_error_logs_grouped_by_region
    - total_error_logs
    - list_experiments
    - get_experiment_by_id
    - list_anomalies
    - recent_failed_experiments
    - system_chaos_summary
    - frequent_failure_patterns
    - agent_failure_rate
    - user_impact_summary
    - http_error_summary
